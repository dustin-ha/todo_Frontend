[{"/home/oem/ToDo/todo_Frontend/src/index.tsx":"1","/home/oem/ToDo/todo_Frontend/src/reportWebVitals.ts":"2","/home/oem/ToDo/todo_Frontend/src/App.tsx":"3"},{"size":500,"mtime":1624867110211,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1624867110211,"results":"6","hashOfConfig":"5"},{"size":7673,"mtime":1625147481585,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mhkanz",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/oem/ToDo/todo_Frontend/src/index.tsx",[],["16","17"],"/home/oem/ToDo/todo_Frontend/src/reportWebVitals.ts",[],"/home/oem/ToDo/todo_Frontend/src/App.tsx",["18"],"import React, { KeyboardEvent, useEffect, useState } from 'react';\nimport './App.css';\n\n//variable.map((value) => <li> {value}</li>)\n\ninterface Todo {\n  id: number;\n  name: string;\n  erstellt: string;\n  ende: number;\n  gruppe: string;\n  prio: number;  //0 bis 3\n  fertig: boolean;\n  delete: boolean;\n}\n\nfunction App() {\n  const [todos, setTodos] = useState<Todo[]>([])\n  const [Xname, setName] = useState('')\n  const [Xgruppe, setGruppe] = useState('')\n  const [editingTodo, setEditingTodo] = useState <Todo[\"id\"] | null>(null)\n  const [Xprio, setPrio] = useState('')\n  const [Xende, setEnde] = useState('')\n  const [Xsort, setSor] = useState('')\n  const [Xricht, setRicht] = useState('')\n  const [editName, setEditName] = useState('')\n  const [editGruppe, setEditGruppe] = useState('')\n  const [editPrio, setEditPrio] = useState('')\n  const [editEnde, setEditEnde] = useState('')\n\n  async function loadTodos() {\n    const requestOptions = {\n      method: 'GET'\n    };\n    const response = await fetch(\"http://localhost:3330/?sortieren=\" + Xsort + \"&richtung=\" + Xricht, requestOptions)\n    const resTodos = await response.json()\n    setTodos(resTodos);\n  }\n\n  useEffect(() => {\n    if (!todos) {\n      loadTodos()\n    }\n  }, [todos])\n\n  const toggleDarkmode = () => async (): Promise<void> => {\n    let element = document.body;\n    element.classList.toggle(\"light-mode\");\n  }\n\n  const createMarkFinished = (id: Todo[\"id\"]) => async (): Promise<void> => {\n    await fetch(`http://localhost:3330/fertig?id=${id}`, { method: \"GET\" });\n    loadTodos();\n  };\n\n  const deleteFinished = (id: Todo[\"id\"]) => async (): Promise<void> =>{\n    await fetch(`http://localhost:3330/edit?id=${editingTodo}&fertig=${false}`, { method: \"PATCH\" });\n    loadTodos()\n  }\n\n  const deleteTodo = (id: Todo[\"id\"]) => async (): Promise<void> => {\n    await fetch(`http://localhost:3330/delete?id=${id}`, { method: \"DELETE\" });\n    loadTodos();\n  };\n\n  const editTodo = (id: Todo[\"id\"]) => async (): Promise<void> => {\n    setEditingTodo(id)\n    setEditName(todos[id].name)\n    setEditGruppe(todos[id].name)\n    setEditEnde(todos[id].name)\n    setEditPrio(todos[id].name)\n  }\n\n  const sendEditTodo = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if(event.key === \"Enter\"){\n      await fetch(`http://localhost:3330/edit?id=${editingTodo}&name=${editName}&gruppe=${editGruppe}&prio=${editPrio}&ende=${editEnde}`, { method: \"PATCH\" });\n      setEditingTodo(null)\n      setEditName(\"\")\n      setEditGruppe(\"\")\n      setEditEnde(\"\")\n      setEditPrio(\"\")\n      loadTodos()\n    }\n  }\n\n  const erstellen = () => async (): Promise<void> => {\n    await fetch(\"http://localhost:3330/new?name=\" + Xname + \"&gruppe=\" + Xgruppe + \"&prio=\" + Xprio + \"&ende=\" + Xende, { method: \"POST\" });\n    loadTodos();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"titel\">\n        <div>\n          <button className=\"darkmodebutton\" onClick={toggleDarkmode()}> &#127774; / &#127769; </button>\n        </div>\n        <h1>ToDo - Liste</h1>\n        <div className=\"splitTitel\">\n          <div className=\"sortArea\">\n            <br></br><br></br><br></br>\n            <select className=\"sortierButton\" onChange={event => setSor(event.target.value)} onClick={event => loadTodos()} id=\"SortierungDerListe\" name=\"SortierungDerListe\">\n              <option value=\"name\">ToDo-Name</option>\n              <option value=\"gruppe\">Gruppe</option>\n              <option value=\"prio\">Priorität</option>\n              <option value=\"erstellt\">Erstellt</option>\n            </select>\n            <select className=\"sortierButton\" onChange={event => setRicht(event.target.value)} onClick={event => loadTodos()} id=\"aufAbSteigend\" name=\"aufAbSteigend\">\n              <option value=\"auf\">Aufsteigend</option>\n              <option value=\"ab\">Absteigend</option>\n            </select>\n          </div>\n        </div>\n      </div>\n      <div>\n        <div className=\"split liste\">\n          {\n            !todos ? <div>Lade Daten</div> :\n              <table>\n                <thead>\n                  <tr>\n                    <th style={{width:\"30%\"}}>To-Do</th>\n                    <th style={{width:\"19%\"}}>Gruppe</th>\n                    <th style={{width:\"1%\"}}>Priorität</th>\n                    <th style={{width:\"10%\"}}>Enddatum</th>\n                    <th style={{width:\"30%\"}}>Erstellt</th>\n                    <th style={{width:\"5%\"}}>Fertig</th>\n                    <th style={{width:\"5%\"}}>Löschen</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    todos.map((value) => <tr key={value.id}>\n                      <td onDoubleClick={editTodo(value.id)}> {editingTodo ===  value.id ? <input onKeyPress={sendEditTodo} onChange={event => setEditName(event.target.value)} type=\"text\" id=\"editName\" name=\"editName\" placeholder={value.name}/> : value.name}</td>\n                      <td onDoubleClick={editTodo(value.id)}> {editingTodo ===  value.id ? <input onKeyPress={sendEditTodo} onChange={event => setEditGruppe(event.target.value)} type=\"text\" id=\"editGruppe\" name=\"editGruppe\" placeholder={value.gruppe}/> : value.gruppe}</td>\n                      <td onDoubleClick={editTodo(value.id)}> {editingTodo ===  value.id ? <input onKeyPress={sendEditTodo} onChange={event => setEditPrio(event.target.value)} type=\"number\" id=\"editPrio\" name=\"editPrio\" placeholder={value.prio?.toString()}/> : value.prio}</td>\n                      <td onDoubleClick={editTodo(value.id)}> {editingTodo ===  value.id ? <input onKeyPress={sendEditTodo} onChange={event => setEditEnde(event.target.value)} type=\"number\" id=\"editEnde\" name=\"editEnde\" placeholder={value.ende?.toString()}/> : value.ende}</td>\n                      <td  onDoubleClick={editTodo(value.id)}> {value.erstellt.toString()}</td>\n                      <td onDoubleClick={deleteFinished(value.id)}> {value.fertig ? <>&#9745;</> : <button onClick={createMarkFinished(value.id)}>Fertig</button>}</td>\n                      <td> {<button onClick={deleteTodo(value.id)}>Löschen</button>}</td>\n                    </tr>)}\n                </tbody>\n              </table>\n          }\n        </div>\n      </div>\n      <div>\n        <div className=\"split eingabe\">\n          <h4>Neu erstellen</h4> <br />\n          <div className=\"Parameter\">\n            <label htmlFor=\"name\"> Name:</label><br />\n            <input onChange={event => setName(event.target.value)} className=\"input\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Aufgabe\" />\n            <br /><br />\n            <label htmlFor=\"gruppe\">Gruppe:</label><br />\n            <input onChange={event => setGruppe(event.target.value)} className=\"input\" type=\"text\" id=\"gruppe\" name=\"gruppe\" placeholder=\"Standard\" />\n            <br /><br />\n            <label htmlFor=\"datum\">Datum</label><br />\n            <input onChange={event => setEnde(event.target.value)} className=\"input\" type=\"text\" id=\"Datum\" name=\"datum\" placeholder=\"DD/MM\" />\n            <br /><br />\n            <label htmlFor=\"prio\">Priorität:</label><br />\n            <select onChange={event => setPrio(event.target.value)} className=\"submit\" id=\"prio\" name=\"Prio\">\n              <option value=\"0\">Geringe Priorität</option>\n              <option value=\"1\">Normale Priorität</option>\n              <option value=\"2\">Hohe Priorität</option>\n              <option value=\"3\">Sehr hohe Priorität</option>\n            </select>\n            <br /><br />\n          </div>\n          <div>\n            <input onClick={erstellen()} className=\"submit\" type=\"submit\" value=\"Erstellen\" />\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":44,"column":6,"nodeType":"25","endLine":44,"endColumn":13,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTodos'. Either include it or remove the dependency array.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [loadTodos, todos]",{"range":"32","text":"33"},[1226,1233],"[loadTodos, todos]"]